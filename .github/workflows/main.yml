---
name: CI

"on":
  push:
    branches: [main, master, v0.2.0]
  pull_request:
    branches: [main, master, v0.2.0]

jobs:
  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './install'
          format: gcc
          severity: error
          disable_check: SC2148

  docker-test:
    name: Dry-run install in Arch Linux (multiple architectures)
    runs-on: ubuntu-latest
    needs: shellcheck
    strategy:
      matrix:
        arch: [amd64, arm64]
        include:
          - arch: amd64
            platform: linux/amd64
            image: archlinux:latest
          - arch: arm64  
            platform: linux/arm64
            image: menci/archlinuxarm:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Pull Arch Linux image for ${{ matrix.arch }}
        run: docker pull --platform ${{ matrix.platform }} ${{ matrix.image }}

      - name: Prepare installer directory
        run: |
          mkdir -p ci-test/.local/share/omarchy
          cp -r . ci-test/.local/share/omarchy/
          # Remove .git directory to avoid issues
          rm -rf ci-test/.local/share/omarchy/.git
        shell: bash

      - name: Create dry-run script
        run: |
          cat > ci-test/test-install.sh << 'EOF'
          #!/bin/bash

          # Set up environment for dry-run testing
          export HOME="/root"
          export OMARCHY_PATH="/root/.local/share/omarchy"
          export OMARCHY_INSTALL="$OMARCHY_PATH/install"
          export OMARCHY_INSTALL_LOG_FILE="/var/log/omarchy-install.log"
          export PATH="$OMARCHY_PATH/bin:$PATH"

          # Create necessary directories
          mkdir -p "$HOME/.local/share"
          cp -r /omarchy/.local/share/omarchy "$HOME/.local/share/"

          # Test architecture detection and compatibility
          echo "=== Testing architecture compatibility ==="
          ARCH="$(uname -m)"
          echo "Detected architecture: $ARCH"

          # Test the guard script logic for both architectures
          GUARD_FILE="$OMARCHY_INSTALL/preflight/guard.sh"
          if [[ "$ARCH" == "aarch64" || "$ARCH" == "x86_64" ]]; then
            echo "✓ Architecture $ARCH should be supported"
            
            # Verify the guard.sh script supports this architecture
            if grep -q "$ARCH" "$GUARD_FILE"; then
              echo "✓ guard.sh includes $ARCH support"
            else
              echo "✗ guard.sh missing $ARCH support"
              exit 1
            fi
          else
            echo "✗ Unsupported architecture: $ARCH"
            exit 1
          fi

          # Run fix-mirrors.sh in dry-run mode to test architecture compatibility
          echo "=== Testing fix-mirrors.sh in dry-run mode ==="
          cd "$OMARCHY_PATH"
          bash fix-mirrors.sh --dry-run

          # Test pacman.conf generation for correct architecture
          echo "=== Testing pacman.conf generation ==="
          if [[ -f /tmp/pacman.conf ]]; then
            echo "Testing generated pacman.conf:"
            if grep -q "Architecture = $ARCH" /tmp/pacman.conf; then
              echo "✓ pacman.conf correctly sets architecture to $ARCH"
            else
              echo "✗ pacman.conf does not set correct architecture"
              echo "Expected: Architecture = $ARCH"
              echo "Found:"
              grep "Architecture" /tmp/pacman.conf || echo "No Architecture line found"
              exit 1
            fi
          fi

          # Test mirror selection logic
          echo "=== Testing mirror selection for $ARCH ==="
          if [[ "$ARCH" == "aarch64" ]]; then
            echo "Testing ARM mirror selection..."
            if bash -c 'source fix-mirrors.sh; [[ "${arch_servers[0]}" =~ archlinuxarm.org ]]' 2>/dev/null; then
              echo "✓ ARM mirrors correctly selected for aarch64"
            fi
          else
            echo "Testing x86_64 mirror selection..."
            if bash -c 'source fix-mirrors.sh; [[ "${arch_servers[0]}" =~ mirror.archlinux.org ]]' 2>/dev/null; then
              echo "✓ Standard mirrors correctly selected for x86_64"
            fi
          fi

          # Test for Asahi-specific features if on ARM
          if [[ "$ARCH" == "aarch64" ]]; then
            echo "=== Testing Asahi Linux compatibility ==="
            # Check if we can detect potential Asahi Linux environment
            if [[ -f /proc/device-tree/compatible ]]; then
              echo "Device tree detected (potential Apple Silicon hardware)"
            fi
            echo "✓ ARM64 architecture tests completed"
          fi

          echo "=== All tests completed successfully ==="
          EOF
          chmod +x ci-test/test-install.sh
        shell: bash

      - name: Run installation test in Docker (${{ matrix.arch }})
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -v "${{ github.workspace }}/ci-test:/omarchy" \
            -w /omarchy \
            ${{ matrix.image }} \
            bash -c "
              # Update package database and install essential packages
              pacman -Sy --noconfirm
              pacman -S --noconfirm bash grep sed curl

              # Run the test script
              bash -x test-install.sh
            "
        shell: bash

  asahi-compatibility-test:
    name: Asahi Linux ARM64 Compatibility Test
    runs-on: ubuntu-latest
    needs: shellcheck

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Run Asahi compatibility test
        run: |
          docker run --rm \
            --platform linux/arm64 \
            -v "${{ github.workspace }}:/omarchy" \
            -w /omarchy \
            menci/archlinuxarm:latest \
            bash -c "
              # Update package database and install essential packages
              pacman -Sy --noconfirm
              pacman -S --noconfirm bash grep sed curl

              # Run the Asahi compatibility test
              echo '=== Running Asahi Linux Compatibility Test ==='
              bash -x tests/test-asahi-compatibility.sh
            "
        shell: bash
