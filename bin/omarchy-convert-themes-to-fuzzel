#!/bin/bash

# Auto-generate fuzzel.ini themes from walker.css files
# This ensures all themes work with fuzzel and handles future theme additions

set -euo pipefail

THEMES_DIR="/home/naeem/.local/share/omarchy/themes"
FORCE="false"

usage() {
    cat <<USAGE
Usage: $(basename "$0") [--force]

    --force   Overwrite existing fuzzel.ini files (rebuild from walker.css)
USAGE
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -f|--force) FORCE="true"; shift ;;
        -h|--help) usage; exit 0 ;;
        *) echo "Unknown option: $1"; usage; exit 1 ;;
    esac
done

# Normalize hex to rrggbbaa. If input has 6 digits, append provided alpha. If 8, keep as-is.
hex_with_alpha() {
    local hex=$(echo "$1" | tr 'A-F' 'a-f' | tr -d '#;')
    local default_a=$(echo "$2" | tr 'A-F' 'a-f' | tr -d '#;')
    if [[ ${#hex} -eq 6 ]]; then
        echo "${hex}${default_a}"
    elif [[ ${#hex} -eq 8 ]]; then
        echo "$hex"
    else
        # Fallback: try to pad/truncate
        echo "${hex}ff" | cut -c1-8
    fi
}

convert_walker_to_fuzzel() {
        local theme_dir="$1"
        local theme_name=$(basename "$theme_dir")
        local walker_css="$theme_dir/walker.css"
        local fuzzel_ini="$theme_dir/fuzzel.ini"
    
        if [[ ! -f "$walker_css" ]]; then
                echo "Warning: No walker.css found in $theme_name, skipping..."
                return 1
        fi
    
        if [[ -f "$fuzzel_ini" && "$FORCE" != "true" ]]; then
                echo "Info: fuzzel.ini already exists for $theme_name, skipping (use --force to overwrite)..."
                return 0
        fi
    
        echo "Converting $theme_name walker.css to fuzzel.ini..."
    
        # Extract color values from walker.css
        local selected_text=$(grep -o '@define-color selected-text #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)
        local text=$(grep -o '@define-color text #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)
        local base=$(grep -o '@define-color base #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)
        local border=$(grep -o '@define-color border #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)
        local foreground=$(grep -o '@define-color foreground #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)
        local background=$(grep -o '@define-color background #[^;]*' "$walker_css" | cut -d'#' -f2 | tr -d ';' || true)

        # Sanity defaults if missing
        text=${text:-ffffff}
        selected_text=${selected_text:-$text}
        base=${base:-000000}
        border=${border:-$text}
        foreground=${foreground:-$text}
        background=${background:-$base}

        # Normalize with alpha
        local bg_rgba=$(hex_with_alpha "$base" f2)           # background override alpha ~95%
        local text_rgba=$(hex_with_alpha "$text" ff)
        local prompt_rgba="$text_rgba"
        local placeholder_rgba="$(hex_with_alpha "$text" 80)"
        local input_rgba="$text_rgba"
        local match_rgba="$(hex_with_alpha "$selected_text" ff)"
        local selection_rgba="$(hex_with_alpha "$text" 40)"  # low-contrast selection background
        local selection_text_rgba="$match_rgba"
        local selection_match_rgba="$match_rgba"
        local counter_rgba="$(hex_with_alpha "$text" 80)"
        local border_rgba="$(hex_with_alpha "$border" ff)"

        # Create fuzzel.ini with converted colors
        cat > "$fuzzel_ini" << EOF
# $(echo "$theme_name" | sed 's/-/ /g' | sed 's/\b\w/\u&/g') Theme for Fuzzel
# Auto-converted from walker.css
# Original walker colors:
# @define-color selected-text #${selected_text};
# @define-color text #${text};
# @define-color base #${base};
# @define-color border #${border};
# @define-color foreground #${foreground};
# @define-color background #${background};

[colors]
# Background color (walker: @base with alpha ~= 0.95)
background=${bg_rgba}
# Main text color (walker: @text)
text=${text_rgba}
# Prompt text color (walker: @text)
prompt=${prompt_rgba}
# Placeholder text color (walker: @text with opacity 0.5)
placeholder=${placeholder_rgba}
# Input text color (walker: @text)
input=${input_rgba}
# Match highlight color (walker: @selected-text)
match=${match_rgba}
# Selection background (approximated from walker's hover state)
selection=${selection_rgba}
# Selected text color (walker: @selected-text)
selection-text=${selection_text_rgba}
# Selected match highlight (walker: @selected-text)
selection-match=${selection_match_rgba}
# Counter color (subdued version of text)
counter=${counter_rgba}
# Border color (walker: @border)
border=${border_rgba}

[border]
# Border styling (walker: 2px solid @border, 0px radius)
width=2
radius=0
EOF
    
        echo "âœ“ Created fuzzel.ini for $theme_name"
}

# Convert all existing themes
echo "Auto-converting walker themes to fuzzel format..."
for theme_dir in "$THEMES_DIR"/*; do
        if [[ -d "$theme_dir" && $(basename "$theme_dir") != "default" ]]; then
                convert_walker_to_fuzzel "$theme_dir"
        fi
done

echo "Conversion complete!"